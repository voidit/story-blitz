function y(){}function k(t,n){for(const e in n)t[e]=n[e];return t}function x(t){return t()}function z(){return Object.create(null)}function w(t){t.forEach(x)}function S(t){return typeof t=="function"}function A(t,n){return t!=t?n==n:t!==n||t&&typeof t=="object"||typeof t=="function"}function F(t){return Object.keys(t).length===0}function j(t,...n){if(t==null){for(const o of n)o(void 0);return y}const e=t.subscribe(...n);return e.unsubscribe?()=>e.unsubscribe():e}function M(t,n,e){t.$$.on_destroy.push(j(n,e))}function P(t,n,e,o){if(t){const u=d(t,n,e,o);return t[0](u)}}function d(t,n,e,o){return t[1]&&o?k(e.ctx.slice(),t[1](o(n))):e.ctx}function U(t,n,e,o){return t[2],n.dirty}function B(t,n,e,o,u,g){if(u){const m=d(n,e,o,g);t.p(m,u)}}function C(t){if(t.ctx.length>32){const n=[],e=t.ctx.length/32;for(let o=0;o<e;o++)n[o]=-1;return n}return-1}function D(t){const n={};for(const e in t)e[0]!=="$"&&(n[e]=t[e]);return n}function G(t,n){const e={};n=new Set(n);for(const o in t)!n.has(o)&&o[0]!=="$"&&(e[o]=t[o]);return e}let a;function i(t){a=t}function p(){if(!a)throw new Error("Function called outside component initialization");return a}function H(t){p().$$.on_mount.push(t)}function I(t){p().$$.after_update.push(t)}const r=[],h=[];let s=[];const f=[],b=Promise.resolve();let _=!1;function E(){_||(_=!0,b.then(O))}function J(){return E(),b}function v(t){s.push(t)}function K(t){f.push(t)}const l=new Set;let c=0;function O(){if(c!==0)return;const t=a;do{try{for(;c<r.length;){const n=r[c];c++,i(n),q(n.$$)}}catch(n){throw r.length=0,c=0,n}for(i(null),r.length=0,c=0;h.length;)h.pop()();for(let n=0;n<s.length;n+=1){const e=s[n];l.has(e)||(l.add(e),e())}s.length=0}while(r.length);for(;f.length;)f.pop()();_=!1,l.clear(),i(t)}function q(t){if(t.fragment!==null){t.update(),w(t.before_update);const n=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,n),t.after_update.forEach(v)}}function L(t){const n=[],e=[];s.forEach(o=>t.indexOf(o)===-1?n.push(o):e.push(o)),e.forEach(o=>o()),s=n}export{K as A,U as a,M as b,P as c,I as d,h as e,F as f,C as g,a as h,S as i,z as j,O as k,i as l,L as m,y as n,H as o,v as p,x as q,w as r,A as s,J as t,B as u,r as v,E as w,k as x,G as y,D as z};
