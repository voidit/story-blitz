import { c as create_ssr_component, e as escape } from "../../chunks/ssr.js";
const css = {
  code: "section.svelte-jakce0{filter:brightness(1.2) contrast(20);-webkit-filter:brightness(1.2) contrast(20)}small.svelte-jakce0{border-top:black 1px dotted;padding-top:0.5rem;margin-top:1.2rem}.father-div.svelte-jakce0{width:50%;height:5vh;margin:0 auto;padding:2rem;padding-left:40%;filter:blur(20px);-webkit-filter:blur(20px)}.cat.svelte-jakce0{background-color:black;width:50px;height:50px;border-radius:50%;animation:svelte-jakce0-right 15s infinite;-webkit-animation:svelte-jakce0-right 15s infinite;cursor:pointer}@-webkit-keyframes svelte-jakce0-right{0%,100%{margin-left:10px}50%{margin-left:-50px}}.dog.svelte-jakce0{background-color:black;width:100px;height:100px;border-radius:50%;-webkit-animation:svelte-jakce0-lefty 5s infinite;position:relative;z-index:4;cursor:pointer}@-webkit-keyframes svelte-jakce0-lefty{0%,100%{margin-left:-250px}50%{margin-left:-50px}}",
  map: '{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n    import {onMount} from \'svelte\';\\n\\n    let dataJSON = null;\\n    let randomPrompt = \'\';\\n    let usedPrompts = new Set();\\n    let prompt = null;\\n    let short = false;\\n    let intro = \'Story Blitz\';\\n    let plot = \'\';\\n\\n    async function fetchPrompts() {\\n        try {\\n            const response = await fetch(\'./data/prompts.json\');\\n            if (!response.ok) throw new Error(\'Network response was not ok\');\\n            return await response.json();\\n        } catch (error) {\\n            console.error(\'Failed to fetch prompts:\', error);\\n            return null;\\n        }\\n    }\\n\\n    let oneOf = (obj) => {\\n        if(!short && obj) {\\n            let rand = Math.floor(Math.random() * obj.length);\\n            return obj[rand].description;\\n        }\\n        return (obj) ? obj[Math.floor(Math.random() * obj.length)].name : \'[...]\';\\n    }\\n    let getOne = (arr) => {\\n        return arr[Math.floor(Math.random() * arr.length)];\\n    }\\n    $: prompts = null;\\n    $: plotLines = (data = null) => {\\n        if (!data) return;\\n        let {\\n            protagonists,\\n            incidents,\\n            settings,\\n            goals,\\n            obstacles,\\n            challenges,\\n            environments,\\n            tones,\\n            transformations,\\n            problems,\\n            genres,\\n            adventures,\\n            valuables,\\n            resolutions,\\n            flaws,\\n            powers,\\n            creatures,\\n            introductions,\\n            plots = []\\n        } = data;\\n        intro = introductions[Math.floor(Math.random() * introductions.length)].name;\\n        if(plots.length > 0) {\\n            let whichPlot = Math.floor(Math.random() * plots.length) || null;\\n            plot = (whichPlot) ? `<b>${plots[whichPlot].name}:</b> ${plots[whichPlot].description}` : \'\';\\n        }\\n        return [\\n            {\\n                id: 1,\\n                body: `Central figure ${oneOf(protagonists)} ${oneOf(incidents)} in ${getOne(settings)} to ${oneOf(goals)}, facing ${oneOf(obstacles)} and ${oneOf(challenges)} along the way.`,\\n            },\\n            {\\n                id: 2,\\n                body: `Main character ${oneOf(protagonists)}  ${oneOf(incidents)}, experiences ${oneOf(challenges)}  and ${oneOf(adventures)}, and returns to ${oneOf(environments)} transformed.`,\\n            },\\n            {\\n                id: 3,\\n                body: `Lead character ${oneOf(protagonists)} embarks on a journey to find ${oneOf(valuables)} and ${oneOf(goals)}.`,\\n            },\\n            {\\n                id: 4,\\n                body: `Hero(ine) ${oneOf(protagonists)} travels to ${oneOf(tones)} ${getOne(settings)}, experiences ${oneOf(transformations)}, and returns to ${oneOf(environments)} with ${oneOf(problems)}.`,\\n            },\\n            {\\n                id: 5,\\n                body: `One of those who ${oneOf(protagonists)} travels to ${oneOf(environments)}, experiences ${oneOf(transformations)}, and returns to ${oneOf(environments)} with ${oneOf(valuables)}.`,\\n            },\\n            {\\n                id: 6,\\n                body: `${oneOf(tones)} and ${oneOf(genres)} story that involves ${oneOf(problems)},  ${oneOf(incidents)}, ${oneOf(challenges)}  and ${oneOf(adventures)}, leading to ${oneOf(resolutions)}.`,\\n            },\\n            {\\n                id: 7,\\n                body: `${oneOf(genres)} story that depicts ${oneOf(tones)} ${oneOf(challenges)}  of ${oneOf(protagonists)} due to ${oneOf(flaws)}, ${oneOf(powers)}, and ${oneOf(creatures)}, leading to ${oneOf(resolutions)}.`,\\n            },\\n            {\\n                id: 8,\\n                body: `Protagonist ${oneOf(protagonists)} undergoes ${oneOf(problems)}, ${oneOf(transformations)} from ${getOne(settings)} to ${oneOf(goals)}, after a period of ${oneOf(challenges)}  and ${oneOf(obstacles)}.`\\n            }];\\n    };\\n    $: getRandomPrompt = () => {\\n        if (usedPrompts.size === prompts.length) {\\n            // Reset used prompts when all have been displayed\\n            usedPrompts.clear();\\n            prompts = plotLines(dataJSON);\\n            console.log(\\"All prompts have been used. Starting over!\\");\\n        } do {\\n            prompt = prompts[Math.floor(Math.random() * prompts.length)];\\n        } while (usedPrompts.has(prompt.id));\\n        usedPrompts.add(prompt.id);\\n        return prompt.body;\\n    }\\n\\n    onMount(async () => {\\n        dataJSON = await fetchPrompts();\\n        if (!dataJSON) return;\\n        prompts = plotLines(dataJSON);\\n        randomPrompt = getRandomPrompt();\\n    });\\n\\n    function shufflePrompt() {\\n        short = !short;\\n        randomPrompt = getRandomPrompt();\\n    }\\n<\/script>\\n\\n<section>\\n    <div class=\\"main\\">\\n        {#if intro}<h2>{intro}</h2>{/if}\\n        <div>{@html randomPrompt}</div>\\n        {#if plot}<small>{@html plot}</small>{/if}\\n\\n        <div class=\\"father-div\\" on:click={shufflePrompt}>\\n            <div class=\\"cat\\">\\n                <div class=\\"dog\\">\\n                    <i class=\\"fal fa-smile\\"></i>\\n                    <div>Blitz!</div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</section>\\n<style>\\n    section {\\n        filter: brightness(1.2) contrast(20);\\n        -webkit-filter: brightness(1.2) contrast(20);\\n    }\\n    small {\\n        border-top: black 1px dotted;\\n        padding-top: 0.5rem;\\n        margin-top: 1.2rem;\\n    }\\n    .father-div{\\n        width: 50%;\\n        height:5vh;\\n        margin: 0 auto;\\n        padding:2rem;\\n        /*background-color: #fff;*/\\n        padding-left:40%;\\n        filter: blur(20px);\\n        -webkit-filter: blur(20px);\\n    }\\n\\n    .cat{\\n        background-color: black;\\n        width: 50px;\\n        height: 50px;\\n\\n        border-radius: 50%;\\n        animation: right 15s infinite;\\n        -webkit-animation: right 15s infinite;\\n        cursor: pointer;\\n/*        background-image: linear-gradient(-45deg, #ee7752, #e73c7e);\\n        background-size: 400% 400%;*/\\n    }\\n\\n    @-webkit-keyframes right {\\n        0%,100%   {\\n            margin-left: 10px;\\n            /*background-position: 0% 50%;*/\\n        }\\n        50% {\\n            margin-left: -50px;\\n            /*background-position: 100% 50%;*/\\n        }\\n    }\\n\\n    .dog{\\n        background-color: black;\\n        width: 100px;\\n        height: 100px;\\n\\n        border-radius: 50%;\\n        -webkit-animation: lefty 5s infinite;\\n        position:relative;\\n        z-index:4;\\n        cursor: pointer;\\n/*        background: linear-gradient(-45deg, #ee7752, #e73c7e);\\n        background-size: 400% 400%;*/\\n    }\\n\\n    @-webkit-keyframes lefty {\\n        0%,100%   {\\n            margin-left: -250px;\\n            /*background-position: 0% 50%;*/\\n        }\\n        50% {\\n            margin-left: -50px;\\n            /*background-position: 100% 50%;*/\\n        }\\n    }\\n</style>"],"names":[],"mappings":"AA0II,qBAAQ,CACJ,MAAM,CAAE,WAAW,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,CACpC,cAAc,CAAE,WAAW,GAAG,CAAC,CAAC,SAAS,EAAE,CAC/C,CACA,mBAAM,CACF,UAAU,CAAE,KAAK,CAAC,GAAG,CAAC,MAAM,CAC5B,WAAW,CAAE,MAAM,CACnB,UAAU,CAAE,MAChB,CACA,yBAAW,CACP,KAAK,CAAE,GAAG,CACV,OAAO,GAAG,CACV,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,QAAQ,IAAI,CAEZ,aAAa,GAAG,CAChB,MAAM,CAAE,KAAK,IAAI,CAAC,CAClB,cAAc,CAAE,KAAK,IAAI,CAC7B,CAEA,kBAAI,CACA,gBAAgB,CAAE,KAAK,CACvB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CAEZ,aAAa,CAAE,GAAG,CAClB,SAAS,CAAE,mBAAK,CAAC,GAAG,CAAC,QAAQ,CAC7B,iBAAiB,CAAE,mBAAK,CAAC,GAAG,CAAC,QAAQ,CACrC,MAAM,CAAE,OAGZ,CAEA,mBAAmB,mBAAM,CACrB,EAAE,CAAC,IAAO,CACN,WAAW,CAAE,IAEjB,CACA,GAAI,CACA,WAAW,CAAE,KAEjB,CACJ,CAEA,kBAAI,CACA,gBAAgB,CAAE,KAAK,CACvB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CAEb,aAAa,CAAE,GAAG,CAClB,iBAAiB,CAAE,mBAAK,CAAC,EAAE,CAAC,QAAQ,CACpC,SAAS,QAAQ,CACjB,QAAQ,CAAC,CACT,MAAM,CAAE,OAGZ,CAEA,mBAAmB,mBAAM,CACrB,EAAE,CAAC,IAAO,CACN,WAAW,CAAE,MAEjB,CACA,GAAI,CACA,WAAW,CAAE,KAEjB,CACJ"}'
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let randomPrompt = "";
  let intro = "Story Blitz";
  $$result.css.add(css);
  return `<section class="svelte-jakce0"><div class="main">${`<h2>${escape(intro)}</h2>`} <div><!-- HTML_TAG_START -->${randomPrompt}<!-- HTML_TAG_END --></div> ${``} <div class="father-div svelte-jakce0" data-svelte-h="svelte-1cfdoow"><div class="cat svelte-jakce0"><div class="dog svelte-jakce0"><i class="fal fa-smile"></i> <div>Blitz!</div></div></div></div></div> </section>`;
});
export {
  Page as default
};
