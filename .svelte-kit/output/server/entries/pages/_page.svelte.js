import { c as create_ssr_component, d as each, f as add_attribute, e as escape } from "../../chunks/ssr.js";
const css = {
  code: ".checkboxes.svelte-r58jug.svelte-r58jug{column-count:5;width:100%}.checkboxes.svelte-r58jug .col.svelte-r58jug{display:flex;flex-wrap:wrap}.theme-lines.svelte-r58jug.svelte-r58jug{display:block;width:100%;overflow:scroll;text-align:left;margin:1rem 0}.theme-lines.svelte-r58jug p.svelte-r58jug{padding-bottom:1rem}.concept-lines.svelte-r58jug.svelte-r58jug,.concept-lines.svelte-r58jug ul.svelte-r58jug,.concept-lines.svelte-r58jug ul li.svelte-r58jug{text-align:left}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n    import { onMount } from 'svelte';\\n\\n    let dataJSON = null;\\n    let prompts = [];\\n    let settings = [];\\n    let introductions = [];\\n    let conclusions = [];\\n    let subjects = [];\\n    let themes = [];\\n    let concepts = [];\\n    let randomPrompt = '';\\n    let usedPrompts = new Set();\\n\\n    async function fetchPrompts() {\\n        try {\\n            const response = await fetch('./data/prompts.json');\\n            if (!response.ok) throw new Error('Network response was not ok');\\n            return await response.json();\\n        } catch (error) {\\n            console.error('Failed to fetch prompts:', error);\\n            return null;\\n        }\\n    }\\n\\n    $: getRandomPrompt = () =>{\\n        if (usedPrompts.size === prompts.length) {\\n            // Reset used prompts when all have been displayed\\n            usedPrompts.clear();\\n            console.log(\\"All prompts have been used. Starting over!\\");\\n        }\\n\\n        let prompt;\\n        do {\\n            prompt = prompts[Math.floor(Math.random() * prompts.length)];\\n        } while (usedPrompts.has(prompt.id));\\n\\n        usedPrompts.add(prompt.id);\\n        return prompt.body;\\n    }\\n    $: themeLines = [];\\n    $: conceptLines = [];\\n    $: getRandomPromptBody = () => {\\n        let promptBody = ' [...] ';\\n        if(themeLines.length > 0) {\\n            for (let i = 0; i < themeLines.length; i++) {\\n                // let t = themeLines[i] - 1;\\n                // promptBody += themes[t].body[Math.floor(Math.random() * themes[i].body.length)];\\n                promptBody += themeLines[i];\\n            }\\n        }\\n        return promptBody += '<br />';\\n    }\\n\\n    onMount(async () => {\\n        dataJSON = await fetchPrompts();\\n        if (!dataJSON) return;\\n        settings = dataJSON.settings;\\n        introductions = dataJSON.introductions;\\n        conclusions = dataJSON.conclusions;\\n        themes = dataJSON.themes;\\n        subjects = dataJSON.subjects;\\n        concepts = dataJSON.concepts.map((k, i) => {\\n            let newKeywords = k.keywords || {};\\n            return {\\n                ...k,\\n                id: i,\\n                keywords: Object.entries(newKeywords),\\n                questions: k.questions || []\\n            }\\n        }); // concept {term, definition, keywords{}}\\n        // console.log('concepts', concepts);\\n\\n        for(let i = 0; i < settings.length; i++) {\\n            prompts.push({\\n                id: i,\\n                body: \`\${settings[i]} \${subjects[Math.floor(Math.random() * subjects.length)]} \${introductions[Math.floor(Math.random() * introductions.length)].body} \${conclusions[Math.floor(Math.random() * conclusions.length)]} \${introductions[i].subject}\`\\n            });\\n        }\\n        randomPrompt = getRandomPrompt();\\n    });\\n\\n    function shufflePrompt() {\\n        randomPrompt = getRandomPrompt();\\n    }\\n<\/script>\\n\\n<section>\\n    <div class=\\"checkboxes\\">\\n        {#if (concepts.length > 0)}\\n            {#each concepts as c, i}\\n                <div class=\\"col\\">\\n                <input type=\\"checkbox\\" bind:group={conceptLines} value=\\"{i}\\" name=\\"concept-{i}\\" />\\n                <label for=\\"concept-{i}\\">{c.term}</label>\\n                </div>\\n            {/each}\\n\\n        {/if}\\n        {#if themes.length > 0}\\n            {#each themes as t}\\n                <div class=\\"col\\">\\n                <input type=\\"checkbox\\" bind:group={themeLines} value=\\"{t.id}\\" name=\\"theme-{t.id}\\" />\\n                <label for=\\"theme-{t.id}\\">{t.theme}</label>\\n                </div>\\n            {/each}\\n        {/if}\\n    </div>\\n    <div class=\\"main\\">\\n<!--        <button on:click={shufflePrompt}>Shuffle</button>-->\\n        {#if (themeLines.length > 0) || (conceptLines.length > 0)}\\n            {#if (themeLines.length > 0)}\\n                <div class=\\"theme-lines\\">\\n                    {#each themeLines as l}\\n                        <p>{themes[l - 1].body[Math.floor(Math.random() * themes[l - 1].body.length)]}</p>\\n                    {/each}\\n                </div>\\n            {/if}\\n            {#if (conceptLines.length > 0)}\\n                <div class=\\"concept-lines\\">\\n                    <ul>\\n                        {#each conceptLines as c}\\n                            <li>\\n                                {concepts[c].term}: {concepts[c].definition}\\n                                {#if concepts[c].keywords}\\n                                    <ul>\\n                                    {#each concepts[c].keywords as keyword}\\n                                        <li>{keyword}</li>\\n                                    {/each}\\n                                    </ul>\\n                                {/if}\\n                            </li>\\n                        {/each}\\n                    </ul>\\n                </div>\\n            {/if}\\n        {:else}\\n            <div>{@html randomPrompt}</div>\\n            <label>\\n                <input class=\\"bubble\\" type=\\"checkbox\\" name=\\"dummy\\" value=\\"on\\"  on:click={shufflePrompt}>\\n            </label>\\n        {/if}\\n    </div>\\n</section>\\n\\n<style>\\n    .checkboxes {\\n        column-count: 5;\\n        width: 100%;\\n    }\\n    .checkboxes .col {\\n        display: flex;\\n        flex-wrap: wrap;\\n    }\\n    .theme-lines {\\n        display: block;\\n        width: 100%;\\n        overflow: scroll;\\n        text-align: left;\\n        margin: 1rem 0;\\n    }\\n    .theme-lines p {\\n        padding-bottom: 1rem;\\n    }\\n    .concept-lines,\\n    .concept-lines ul,\\n    .concept-lines ul li {\\n        text-align: left;\\n    }\\n</style>"],"names":[],"mappings":"AAiJI,uCAAY,CACR,YAAY,CAAE,CAAC,CACf,KAAK,CAAE,IACX,CACA,yBAAW,CAAC,kBAAK,CACb,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IACf,CACA,wCAAa,CACT,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,IAAI,CACX,QAAQ,CAAE,MAAM,CAChB,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,IAAI,CAAC,CACjB,CACA,0BAAY,CAAC,eAAE,CACX,cAAc,CAAE,IACpB,CACA,0CAAc,CACd,4BAAc,CAAC,gBAAE,CACjB,4BAAc,CAAC,EAAE,CAAC,gBAAG,CACjB,UAAU,CAAE,IAChB"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let themeLines;
  let conceptLines;
  let themes = [];
  let concepts = [];
  let randomPrompt = "";
  $$result.css.add(css);
  themeLines = [];
  conceptLines = [];
  return `<section><div class="checkboxes svelte-r58jug">${concepts.length > 0 ? `${each(concepts, (c, i) => {
    return `<div class="col svelte-r58jug"><input type="checkbox"${add_attribute("value", i, 0)} name="${"concept-" + escape(i, true)}"${~conceptLines.indexOf(i) ? add_attribute("checked", true, 1) : ""}> <label for="${"concept-" + escape(i, true)}">${escape(c.term)}</label> </div>`;
  })}` : ``} ${themes.length > 0 ? `${each(themes, (t) => {
    return `<div class="col svelte-r58jug"><input type="checkbox"${add_attribute("value", t.id, 0)} name="${"theme-" + escape(t.id, true)}"${~themeLines.indexOf(t.id) ? add_attribute("checked", true, 1) : ""}> <label for="${"theme-" + escape(t.id, true)}">${escape(t.theme)}</label> </div>`;
  })}` : ``}</div> <div class="main"> ${themeLines.length > 0 || conceptLines.length > 0 ? `${themeLines.length > 0 ? `<div class="theme-lines svelte-r58jug">${each(themeLines, (l) => {
    return `<p class="svelte-r58jug">${escape(themes[l - 1].body[Math.floor(Math.random() * themes[l - 1].body.length)])}</p>`;
  })}</div>` : ``} ${conceptLines.length > 0 ? `<div class="concept-lines svelte-r58jug"><ul class="svelte-r58jug">${each(conceptLines, (c) => {
    return `<li class="svelte-r58jug">${escape(concepts[c].term)}: ${escape(concepts[c].definition)} ${concepts[c].keywords ? `<ul class="svelte-r58jug">${each(concepts[c].keywords, (keyword) => {
      return `<li class="svelte-r58jug">${escape(keyword)}</li>`;
    })} </ul>` : ``} </li>`;
  })}</ul></div>` : ``}` : `<div><!-- HTML_TAG_START -->${randomPrompt}<!-- HTML_TAG_END --></div> <label><input class="bubble" type="checkbox" name="dummy" value="on"></label>`}</div> </section>`;
});
export {
  Page as default
};
