import { c as create_ssr_component } from "../../chunks/ssr.js";
const css = {
  code: "section.svelte-1cwlzej{-webkit-filter:brightness(1.2) contrast(20);background:#fff}.father-div.svelte-1cwlzej{width:50%;height:5vh;margin:0 auto;padding:2rem;background-color:#fff;padding-left:40%;-webkit-filter:blur(20px)\n\n    }.cat.svelte-1cwlzej{background:#000;width:50px;height:50px;border-radius:50%;-webkit-animation:svelte-1cwlzej-right 15s infinite;cursor:pointer}@-webkit-keyframes svelte-1cwlzej-right{0%,100%{margin-left:100px }50%{margin-left:-100px }}.dog.svelte-1cwlzej{background:#000;width:150px;height:150px;border-radius:250px;-webkit-animation:svelte-1cwlzej-lefty 5s infinite;position:relative;z-index:4;cursor:pointer}@-webkit-keyframes svelte-1cwlzej-lefty{0%,100%{margin-left:-250px }50%{margin-left:-50px }}",
  map: '{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n    import {onMount} from \'svelte\';\\n\\n    let dataJSON = null;\\n    let randomPrompt = \'\';\\n    let usedPrompts = new Set();\\n    let prompt = null;\\n    let short = false;\\n\\n    async function fetchPrompts() {\\n        try {\\n            const response = await fetch(\'./data/prompts.json\');\\n            if (!response.ok) throw new Error(\'Network response was not ok\');\\n            return await response.json();\\n        } catch (error) {\\n            console.error(\'Failed to fetch prompts:\', error);\\n            return null;\\n        }\\n    }\\n\\n    let oneOf = (obj) => {\\n        if(!short && obj) {\\n            let rand = Math.floor(Math.random() * obj.length);\\n            return obj[rand].description;\\n        }\\n        return (obj) ? obj[Math.floor(Math.random() * obj.length)].name : \'[...]\';\\n    }\\n    let getOne = (arr) => {\\n        return arr[Math.floor(Math.random() * arr.length)];\\n    }\\n    $: prompts = null;\\n    $: plotLines = (data = null) => {\\n        if (!data) return;\\n        let {\\n            protagonists,\\n            incidents,\\n            settings,\\n            goals,\\n            obstacles,\\n            challenges,\\n            environments,\\n            tones,\\n            transformations,\\n            problems,\\n            genres,\\n            adventures,\\n            valuables,\\n            resolutions,\\n            flaws,\\n            powers,\\n            creatures\\n        } = data;\\n        return [\\n            {\\n                id: 1,\\n                body: `${oneOf(protagonists)} ${oneOf(incidents)} in ${getOne(settings)} to ${oneOf(goals)}, facing ${oneOf(obstacles)} and ${oneOf(challenges)} along the way.`,\\n            },\\n            {\\n                id: 2,\\n                body: `${oneOf(protagonists)}  ${oneOf(incidents)}, experiences ${oneOf(challenges)}  and ${oneOf(adventures)}, and returns to ${oneOf(environments)} transformed.`,\\n            },\\n            {\\n                id: 3,\\n                body: `${oneOf(protagonists)} embarks on a journey to find ${oneOf(valuables)} and ${oneOf(goals)}.`,\\n            },\\n            {\\n                id: 4,\\n                body: `${oneOf(protagonists)} travels to ${oneOf(tones)} ${getOne(settings)}, experiences ${oneOf(transformations)}, and returns to ${oneOf(environments)} with ${oneOf(problems)}.`,\\n            },\\n            {\\n                id: 5,\\n                body: `${oneOf(protagonists)} travels to ${oneOf(environments)}, experiences ${oneOf(transformations)}, and returns to ${oneOf(environments)} with ${oneOf(valuables)}.`,\\n            },\\n            {\\n                id: 6,\\n                body: `${oneOf(tones)} and ${oneOf(genres)} story that involves ${oneOf(problems)},  ${oneOf(incidents)}, ${oneOf(challenges)}  and ${oneOf(adventures)}, leading to ${oneOf(resolutions)}.`,\\n            },\\n            {\\n                id: 7,\\n                body: `${oneOf(genres)} story that depicts ${oneOf(tones)} ${oneOf(challenges)}  of ${oneOf(protagonists)} due to ${oneOf(flaws)}, ${oneOf(powers)}, and ${oneOf(creatures)}, leading to ${oneOf(resolutions)}.`,\\n            },\\n            {\\n                id: 8,\\n                body: `${oneOf(protagonists)} undergoes ${oneOf(problems)}, ${oneOf(transformations)} from ${getOne(settings)} to ${oneOf(goals)}, after a period of ${oneOf(challenges)}  and ${oneOf(obstacles)}.`\\n            }];\\n    };\\n    $: getRandomPrompt = () => {\\n        if (usedPrompts.size === prompts.length) {\\n            // Reset used prompts when all have been displayed\\n            usedPrompts.clear();\\n            prompts = plotLines(dataJSON);\\n            console.log(\\"All prompts have been used. Starting over!\\");\\n        } do {\\n            prompt = prompts[Math.floor(Math.random() * prompts.length)];\\n        } while (usedPrompts.has(prompt.id));\\n        usedPrompts.add(prompt.id);\\n        return prompt.body;\\n    }\\n\\n    onMount(async () => {\\n        dataJSON = await fetchPrompts();\\n        if (!dataJSON) return;\\n        prompts = plotLines(dataJSON);\\n        randomPrompt = getRandomPrompt();\\n    });\\n\\n    function shufflePrompt() {\\n        short = !short;\\n        randomPrompt = getRandomPrompt();\\n    }\\n<\/script>\\n\\n<section>\\n    <div class=\\"main\\">\\n\\n        <div>{@html randomPrompt}</div>\\n\\n        <div class=\\"father-div\\" on:click={shufflePrompt}>\\n            <div class=\\"cat\\">\\n                <div class=\\"dog\\">\\n                    <div></div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</section>\\n<style>\\n    section {\\n        -webkit-filter: brightness(1.2) contrast(20);\\n        background:#fff;\\n    }\\n    .father-div{\\n        width: 50%;\\n        height:5vh;\\n        margin: 0 auto;\\n        padding:2rem;\\n        background-color: #fff;\\n        padding-left:40%;\\n        -webkit-filter: blur(20px)\\n\\n    }\\n\\n    .cat{\\n        background: #000;\\n        width: 50px;\\n        height: 50px;\\n\\n        border-radius: 50%;\\n        -webkit-animation: right 15s infinite;\\n        cursor: pointer;\\n    }\\n\\n    @-webkit-keyframes right {\\n        0%,100%   { margin-left: 100px }\\n        50% { margin-left: -100px }\\n    }\\n\\n    .dog{\\n        background: #000;\\n        width: 150px;\\n        height: 150px;\\n\\n        border-radius: 250px;\\n        -webkit-animation: lefty 5s infinite;\\n        position:relative;\\n        z-index:4;\\n        cursor: pointer;\\n    }\\n\\n    @-webkit-keyframes lefty {\\n        0%,100%   { margin-left: -250px }\\n        50% { margin-left: -50px }\\n    }\\n</style>"],"names":[],"mappings":"AA+HI,sBAAQ,CACJ,cAAc,CAAE,WAAW,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,CAC5C,WAAW,IACf,CACA,0BAAW,CACP,KAAK,CAAE,GAAG,CACV,OAAO,GAAG,CACV,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,QAAQ,IAAI,CACZ,gBAAgB,CAAE,IAAI,CACtB,aAAa,GAAG,CAChB,cAAc,CAAE,KAAK,IAAI;;AAEjC,IAAI,CAEA,mBAAI,CACA,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CAEZ,aAAa,CAAE,GAAG,CAClB,iBAAiB,CAAE,oBAAK,CAAC,GAAG,CAAC,QAAQ,CACrC,MAAM,CAAE,OACZ,CAEA,mBAAmB,oBAAM,CACrB,EAAE,CAAC,IAAO,CAAE,WAAW,CAAE,KAAK,CAAC,CAC/B,GAAI,CAAE,WAAW,CAAE,MAAM,CAAC,CAC9B,CAEA,mBAAI,CACA,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CAEb,aAAa,CAAE,KAAK,CACpB,iBAAiB,CAAE,oBAAK,CAAC,EAAE,CAAC,QAAQ,CACpC,SAAS,QAAQ,CACjB,QAAQ,CAAC,CACT,MAAM,CAAE,OACZ,CAEA,mBAAmB,oBAAM,CACrB,EAAE,CAAC,IAAO,CAAE,WAAW,CAAE,MAAM,CAAC,CAChC,GAAI,CAAE,WAAW,CAAE,KAAK,CAAC,CAC7B"}'
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let randomPrompt = "";
  $$result.css.add(css);
  return `<section class="svelte-1cwlzej"><div class="main"><div><!-- HTML_TAG_START -->${randomPrompt}<!-- HTML_TAG_END --></div> <div class="father-div svelte-1cwlzej" data-svelte-h="svelte-1mxaaar"><div class="cat svelte-1cwlzej"><div class="dog svelte-1cwlzej"><div></div></div></div></div></div> </section>`;
});
export {
  Page as default
};
